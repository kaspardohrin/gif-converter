{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/kaspar/Documents/cmgt/specialisatie-block/react-tsc/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/kaspar/Documents/cmgt/specialisatie-block/react-tsc/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar resolveURL = require('resolve-url');\n\nvar _require = require('../utils/log'),\n    log = _require.log;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var _corePath, corePath, workerBlob;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _corePath = _ref.corePath;\n\n            if (!(typeof window.createFFmpegCore === 'undefined')) {\n              _context.next = 13;\n              break;\n            }\n\n            log('info', 'fetch ffmpeg-core.worker.js script');\n            corePath = resolveURL(_corePath);\n            _context.next = 6;\n            return fetch(corePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'));\n\n          case 6:\n            _context.next = 8;\n            return _context.sent.blob();\n\n          case 8:\n            workerBlob = _context.sent;\n            window.FFMPEG_CORE_WORKER_SCRIPT = URL.createObjectURL(workerBlob);\n            log('info', \"worker object URL=\".concat(window.FFMPEG_CORE_WORKER_SCRIPT));\n            log('info', \"download ffmpeg-core script (~25 MB) from \".concat(corePath));\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              var script = document.createElement('script');\n\n              var eventHandler = function eventHandler() {\n                script.removeEventListener('load', eventHandler);\n                log('info', 'initialize ffmpeg-core');\n                resolve(window.createFFmpegCore);\n              };\n\n              script.src = corePath;\n              script.type = 'text/javascript';\n              script.addEventListener('load', eventHandler);\n              document.getElementsByTagName('head')[0].appendChild(script);\n            }));\n\n          case 13:\n            log('info', 'ffmpeg-core is loaded already');\n            return _context.abrupt(\"return\", Promise.resolve(window.createFFmpegCore));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/kaspar/Documents/cmgt/specialisatie-block/react-tsc/node_modules/@ffmpeg/ffmpeg/src/browser/getCreateFFmpegCore.js"],"names":["resolveURL","require","log","module","exports","_corePath","corePath","window","createFFmpegCore","fetch","replace","blob","workerBlob","FFMPEG_CORE_WORKER_SCRIPT","URL","createObjectURL","Promise","resolve","script","document","createElement","eventHandler","removeEventListener","src","type","addEventListener","getElementsByTagName","appendChild"],"mappings":";;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;eACgBA,OAAO,CAAC,cAAD,C;IAAfC,G,YAAAA,G;;AAERC,MAAM,CAACC,OAAP;AAAA,uEAAiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmBC,YAAAA,SAAnB,QAASC,QAAT;;AAAA,kBACX,OAAOC,MAAM,CAACC,gBAAd,KAAmC,WADxB;AAAA;AAAA;AAAA;;AAEbN,YAAAA,GAAG,CAAC,MAAD,EAAS,oCAAT,CAAH;AACMI,YAAAA,QAHO,GAGIN,UAAU,CAACK,SAAD,CAHd;AAAA;AAAA,mBAImBI,KAAK,CAACH,QAAQ,CAACI,OAAT,CAAiB,gBAAjB,EAAmC,uBAAnC,CAAD,CAJxB;;AAAA;AAAA;AAAA,iCAIuFC,IAJvF;;AAAA;AAIPC,YAAAA,UAJO;AAKbL,YAAAA,MAAM,CAACM,yBAAP,GAAmCC,GAAG,CAACC,eAAJ,CAAoBH,UAApB,CAAnC;AACAV,YAAAA,GAAG,CAAC,MAAD,8BAA8BK,MAAM,CAACM,yBAArC,EAAH;AACAX,YAAAA,GAAG,CAAC,MAAD,sDAAsDI,QAAtD,EAAH;AAPa,6CAQN,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,kBAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;;AACA,kBAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBH,gBAAAA,MAAM,CAACI,mBAAP,CAA2B,MAA3B,EAAmCD,YAAnC;AACAnB,gBAAAA,GAAG,CAAC,MAAD,EAAS,wBAAT,CAAH;AACAe,gBAAAA,OAAO,CAACV,MAAM,CAACC,gBAAR,CAAP;AACD,eAJD;;AAKAU,cAAAA,MAAM,CAACK,GAAP,GAAajB,QAAb;AACAY,cAAAA,MAAM,CAACM,IAAP,GAAc,iBAAd;AACAN,cAAAA,MAAM,CAACO,gBAAP,CAAwB,MAAxB,EAAgCJ,YAAhC;AACAF,cAAAA,QAAQ,CAACO,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDT,MAArD;AACD,aAXM,CARM;;AAAA;AAqBfhB,YAAAA,GAAG,CAAC,MAAD,EAAS,+BAAT,CAAH;AArBe,6CAsBRc,OAAO,CAACC,OAAR,CAAgBV,MAAM,CAACC,gBAAvB,CAtBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const resolveURL = require('resolve-url');\nconst { log } = require('../utils/log');\n\nmodule.exports = async ({ corePath: _corePath }) => {\n  if (typeof window.createFFmpegCore === 'undefined') {\n    log('info', 'fetch ffmpeg-core.worker.js script');\n    const corePath = resolveURL(_corePath);\n    const workerBlob = await (await fetch(corePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'))).blob();\n    window.FFMPEG_CORE_WORKER_SCRIPT = URL.createObjectURL(workerBlob);\n    log('info', `worker object URL=${window.FFMPEG_CORE_WORKER_SCRIPT}`);\n    log('info', `download ffmpeg-core script (~25 MB) from ${corePath}`);\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        log('info', 'initialize ffmpeg-core');\n        resolve(window.createFFmpegCore);\n      };\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n  log('info', 'ffmpeg-core is loaded already');\n  return Promise.resolve(window.createFFmpegCore);\n};\n"]},"metadata":{},"sourceType":"script"}